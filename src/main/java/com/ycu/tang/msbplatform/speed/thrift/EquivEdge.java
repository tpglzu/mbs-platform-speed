/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ycu.tang.msbplatform.speed.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.2)", date = "2021-11-03")
public class EquivEdge implements org.apache.thrift.TBase<EquivEdge, EquivEdge._Fields>, java.io.Serializable, Cloneable, Comparable<EquivEdge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EquivEdge");

  private static final org.apache.thrift.protocol.TField ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("id1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("id2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EquivEdgeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EquivEdgeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable com.ycu.tang.msbplatform.speed.thrift.PersonID id1; // required
  public @org.apache.thrift.annotation.Nullable com.ycu.tang.msbplatform.speed.thrift.PersonID id2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID1((short)1, "id1"),
    ID2((short)2, "id2");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID1
          return ID1;
        case 2: // ID2
          return ID2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID1, new org.apache.thrift.meta_data.FieldMetaData("id1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ycu.tang.msbplatform.speed.thrift.PersonID.class)));
    tmpMap.put(_Fields.ID2, new org.apache.thrift.meta_data.FieldMetaData("id2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ycu.tang.msbplatform.speed.thrift.PersonID.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EquivEdge.class, metaDataMap);
  }

  public EquivEdge() {
  }

  public EquivEdge(
    com.ycu.tang.msbplatform.speed.thrift.PersonID id1,
    com.ycu.tang.msbplatform.speed.thrift.PersonID id2)
  {
    this();
    this.id1 = id1;
    this.id2 = id2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EquivEdge(EquivEdge other) {
    if (other.isSetId1()) {
      this.id1 = new com.ycu.tang.msbplatform.speed.thrift.PersonID(other.id1);
    }
    if (other.isSetId2()) {
      this.id2 = new com.ycu.tang.msbplatform.speed.thrift.PersonID(other.id2);
    }
  }

  public EquivEdge deepCopy() {
    return new EquivEdge(this);
  }

  @Override
  public void clear() {
    this.id1 = null;
    this.id2 = null;
  }

  @org.apache.thrift.annotation.Nullable
  public com.ycu.tang.msbplatform.speed.thrift.PersonID getId1() {
    return this.id1;
  }

  public EquivEdge setId1(@org.apache.thrift.annotation.Nullable com.ycu.tang.msbplatform.speed.thrift.PersonID id1) {
    this.id1 = id1;
    return this;
  }

  public void unsetId1() {
    this.id1 = null;
  }

  /** Returns true if field id1 is set (has been assigned a value) and false otherwise */
  public boolean isSetId1() {
    return this.id1 != null;
  }

  public void setId1IsSet(boolean value) {
    if (!value) {
      this.id1 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.ycu.tang.msbplatform.speed.thrift.PersonID getId2() {
    return this.id2;
  }

  public EquivEdge setId2(@org.apache.thrift.annotation.Nullable com.ycu.tang.msbplatform.speed.thrift.PersonID id2) {
    this.id2 = id2;
    return this;
  }

  public void unsetId2() {
    this.id2 = null;
  }

  /** Returns true if field id2 is set (has been assigned a value) and false otherwise */
  public boolean isSetId2() {
    return this.id2 != null;
  }

  public void setId2IsSet(boolean value) {
    if (!value) {
      this.id2 = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID1:
      if (value == null) {
        unsetId1();
      } else {
        setId1((com.ycu.tang.msbplatform.speed.thrift.PersonID)value);
      }
      break;

    case ID2:
      if (value == null) {
        unsetId2();
      } else {
        setId2((com.ycu.tang.msbplatform.speed.thrift.PersonID)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID1:
      return getId1();

    case ID2:
      return getId2();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID1:
      return isSetId1();
    case ID2:
      return isSetId2();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof EquivEdge)
      return this.equals((EquivEdge)that);
    return false;
  }

  public boolean equals(EquivEdge that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id1 = true && this.isSetId1();
    boolean that_present_id1 = true && that.isSetId1();
    if (this_present_id1 || that_present_id1) {
      if (!(this_present_id1 && that_present_id1))
        return false;
      if (!this.id1.equals(that.id1))
        return false;
    }

    boolean this_present_id2 = true && this.isSetId2();
    boolean that_present_id2 = true && that.isSetId2();
    if (this_present_id2 || that_present_id2) {
      if (!(this_present_id2 && that_present_id2))
        return false;
      if (!this.id2.equals(that.id2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId1()) ? 131071 : 524287);
    if (isSetId1())
      hashCode = hashCode * 8191 + id1.hashCode();

    hashCode = hashCode * 8191 + ((isSetId2()) ? 131071 : 524287);
    if (isSetId2())
      hashCode = hashCode * 8191 + id2.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(EquivEdge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId1(), other.isSetId1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id1, other.id1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetId2(), other.isSetId2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id2, other.id2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("EquivEdge(");
    boolean first = true;

    sb.append("id1:");
    if (this.id1 == null) {
      sb.append("null");
    } else {
      sb.append(this.id1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id2:");
    if (this.id2 == null) {
      sb.append("null");
    } else {
      sb.append(this.id2);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id1' was not present! Struct: " + toString());
    }
    if (id2 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id2' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EquivEdgeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EquivEdgeStandardScheme getScheme() {
      return new EquivEdgeStandardScheme();
    }
  }

  private static class EquivEdgeStandardScheme extends org.apache.thrift.scheme.StandardScheme<EquivEdge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EquivEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id1 = new com.ycu.tang.msbplatform.speed.thrift.PersonID();
              struct.id1.read(iprot);
              struct.setId1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id2 = new com.ycu.tang.msbplatform.speed.thrift.PersonID();
              struct.id2.read(iprot);
              struct.setId2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EquivEdge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id1 != null) {
        oprot.writeFieldBegin(ID1_FIELD_DESC);
        struct.id1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.id2 != null) {
        oprot.writeFieldBegin(ID2_FIELD_DESC);
        struct.id2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EquivEdgeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EquivEdgeTupleScheme getScheme() {
      return new EquivEdgeTupleScheme();
    }
  }

  private static class EquivEdgeTupleScheme extends org.apache.thrift.scheme.TupleScheme<EquivEdge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EquivEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id1.write(oprot);
      struct.id2.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EquivEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id1 = new com.ycu.tang.msbplatform.speed.thrift.PersonID();
      struct.id1.read(iprot);
      struct.setId1IsSet(true);
      struct.id2 = new com.ycu.tang.msbplatform.speed.thrift.PersonID();
      struct.id2.read(iprot);
      struct.setId2IsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

